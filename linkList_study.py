# 4.2链表
# 链表是一种线性数据结构，其中的每一个元素都是一个节点对象，各个节点通过“引用”相连接。引用记录了下一个节点的内存地址，通过它可以从当前节点访问到下一个节点；
# 链表的设计使得各个节点可以分散存储在内存各处，他们的内存地址无需连续；当数组过大，无法提供如此大的连续内存空间时，链表的灵活优势就体现出来了；
# 链表的组成单位是“节点”对象；每个节点都包含两项数据：节点的“值”和指向下一节点的“引用”；
#   链表的首个节点被称为空节点，最后一个被称为尾节点；
#   尾节点指向的是“空”，在pytho中记为None
#   在C、C++、RUST中，引用就是指针
#   链表在相同的数据量下，除了值还需额外保存一个引用(指针)，因此比数组占用更多的内存空间
from typing import Optional


class ListNode:
    """链表节点类"""
    def __init__(self,val: int):
        self.var: int = val  #节点值
        self.next: Optional[ListNode] = None #模拟指针值

## 链表常用操作
## 1、初始化链表
## 建立链表后分为两步，第一步是初始化各个节点对象，第二步是构建节点之间的引用关系。初始化完成后，就可以从链表的头节点出发，通过引用指向next依次访问所有节点。
n0 = ListNode(1)
n1 = ListNode(2)
n2 = ListNode(3)


n0.next = n1
n1.next = n2


## 数组整体是一个变量，比如数组nums包含元素nums[0]和nums[1]等，而链表是由多个独立的节点对象组成的。通常将头节点当作链表的代称
## 2、插入节点
## 在链表中插入节点非常容易。在两个相邻节点n0和n1之间插入一个新的节点P，则只需要改变两个节点引用(指针)即可,时间复杂度为O(1)
def insert(n0: ListNode,P: ListNode):
    """在链表的节点n0之后插入节点P"""
    n1 = n0.next
    P.next = n1
    n0.next = P
insert(n0,ListNode(0))

## 3、删除节点
## 在链表中删除节点，只需要改变一个节点的引用(指针)即可。