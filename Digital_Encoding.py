# 3.3数字编码
# 3.3.1原码、反码、补码
# 数字是以“补码”的形式存储在计算机中的
# 原码：将数字的二进制表示的最高位视为符号位，其中0表示正数、1表示负数，其余位表示数字的值(原码不能直接用于运算)
# 反码：正数的反码与原码相同，负数的反码是对其原码除符号位外的所有位取反
# 补码：正数的补码与其原码相同，负数的补码是在其反码的基础上加1
# 原码 -> 补码 ：先将原码除符号位的所有位求反得到反码，再通过对反码加1得到补码
# 补码 -> 原码 ：先对补码进行减1得到反码，再对反码除符号位的各位取反得到原码
# 3.3.2 浮点数编码
# int和float长度相同都是4字节，但是float的取值范围远远大于int；这是因为float采用了不同的表示方式。一个32比特长度的二进制数为b32...b1b0
# 32-bit长度的float由以下三部分构成：
# 符号位S：占1位,对应b31
# 指数位E：占8位,对应b30...b23
# 分数位N：占23位,对应b22...b0
# 3.4字符编码
# 计算机中，所有数据都是以二进制进行存储的；通过建立字符集，规定每个字符和二进制数之间的一一对应关系。计算机可通过查字符集表完成二进制到字符的转换